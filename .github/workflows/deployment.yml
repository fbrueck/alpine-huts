name: Deploy Infra & Ingestion

on:
  push:
    branches:
      #- main
      - chore/refactor-ci-cd

jobs:
  detect_changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      infrastructure_changed: ${{ steps.filter.outputs.infrastructure }}
      ingestion_changed: ${{ steps.filter.outputs.ingestion }}
      data_changed: ${{ steps.filter.outputs.data }}
    steps:
      - uses: actions/checkout@v3

      - name: Check changed folders
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            infrastructure:
              - 'infrastructure/**'
              - 'ingestion/src/models.py'
            ingestion:
              - 'ingestion/**'
            data:
              - 'data/**'

  deploy_infrastructure:
    name: Deploy infrastructure
    needs: detect_changes
    runs-on: ubuntu-latest
    steps:
      - name: Check infrastructure changes
#        if: needs.detect_changes.outputs.infrastructure_changed == 'false'
        run: echo "No infrastructure changes, skipping deployment." && exit 0
      - uses: actions/checkout@v3
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.22"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Generate Glue schemas and deploy infrastructure
        run: make infra

  deploy_ingestion:
    name: Deploy Ingestion Lambda
    needs: [detect_changes, deploy_infrastructure]
#    if: needs.detect_changes.outputs.ingestion_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.22"

      - name: Build & Deploy Lambda
        run: cd ingestion && make

  buid_data_models:
    name: Build data models
    needs: [detect_changes, deploy_infrastructure]
#    if: needs.detect_changes.outputs.data_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.22"

      - name: Build data models
        run: cd data/dbt && uv run dbt deps && uv run dbt run && uv run dbt test

  update_dbt_image:
    name: Update dbt image
    needs: [detect_changes, deploy_infrastructure]
#    if: needs.detect_changes.outputs.data_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.22"

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and update image
        run: cd data && make
